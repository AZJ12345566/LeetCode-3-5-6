class Solution {
/*
3.无重复字符的最长子串
给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串的长度。
*/
  public int lengthOfLongestSubstring(String s) {
    if(s.length() == 0) {
      return 0;
    }
    HashMap<Character, Integer> map = new HashMap<>();
    int max = 0;
    int left = 0;
    for(int i = 0; i < s.length(); i++) {
      if(map.containsKey(s.charAt(i))) {
        left = Math.max(left, map.get(s.charAt(i)) + 1);
      }
      map.put(s.charAt(i), i);
      max = Math.max(max, i - left + 1);
    }
    return max;
  }
/*
5.最长回文子串
给你一个字符串 s，找到 s 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。
*/
  public String longestPalindrome(String s) {
    int len = s.length();
    if(len < 2) {
      return s;
    }

    int maxLen = 1;
    int begin = 0;
    boolean[][] dp = new boolean[len][len];
    for(int i = 0; i < len; i++) {
      dp[i][i] = true;
    }

    char[] charArray = s.toCharArray();
    for(int L = 2; L <= len; L++) {
      for(int i = 0; i < len; i++) {
        int j = L + i - 1;
        if(j >= len) {
          break;
        }

        if(charArray[i] != charArray[j]) {
          dp[i][j] = false;
        } else {
            if(j - i < 3) {
              dp[i][j] = true;
            } else {
                dp[i][j] = dp[i + 1][j - 1];
            }
        }
        if(dp[i][j] && j - i + 1 > maxLen) {
          maxLen = j - i + 1;
          begin = i;
        }
      }
    }
    return s.substring(begin, begin + maxLen);
  }
/*
6.Z字形变换
将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 "PAYPALISHIRING" 行数为 3 时，排列如下：
P   A   H   N
A P L S I I G
Y   I   R
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："PAHNAPLSIIGYIR"。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows);
*/
  public String convert(String s, int numRows) {
    if(numRows < 2) {
            return s;
        }
        List<StringBuilder> rows = new ArrayList<StringBuilder>();
        for(int i = 0; i < numRows; i++) {
            rows.add(new StringBuilder());
        }
        int i = 0, flag = -1;
        for(char c : s.toCharArray()) {
            rows.get(i).append(c);
            if(i == 0 || i == numRows - 1) {
                flag = -flag;
            }
            i += flag;
        }
        StringBuilder res = new StringBuilder();
        for(StringBuilder row : rows) {
            res.append(row);
        }
        return res.toString();
  }
}
